# .github/workflows/flutter_test.yml
name: Flutter Integration Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  android-test:
    name: Run Android Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.2' # Actualiza según la versión que uses

      - name: Install dependencies
        run: flutter pub get

      - name: Run Android Integration Tests
        run: |
          flutter drive \
            -d gcloud dm3q, version=33 \
            --driver=test_driver/integration_test.dart \
            --target=integration_test/face_benchmark_test.dart 

      - name: Upload Test Results to Firebase Test Lab (Android)
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          # Construir APK de prueba
          flutter build apk --debug
          cd android
          ./gradlew assembleAndroidTest
          ./gradlew assembleDebug -Ptarget=../integration_test/app_test.dart
          cd ..

          # Ejecutar pruebas en Firebase Test Lab
          gcloud auth activate-service-account --key-file=${{ secrets.GCP_SA_KEY }}
          gcloud --quiet config set project ${{ secrets.GCP_PROJECT }}
          
          gcloud firebase test android run --type instrumentation \
            --app build/app/outputs/apk/debug/app-debug.apk \
            --test build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
            --device model=b0q,version=33 \
            --timeout 30m \
            --results-bucket=${{ secrets.GCP_RESULTS_BUCKET }} \
            --results-dir=android_tests/${{ github.run_id }}
  ios-test:
    name: Run iOS Integration Tests
    runs-on: macos-latest

    steps:
      # 1. Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configurar Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.2' # Actualiza según la versión que uses
      #cache
      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            /Users/runner/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-


      # 3. Instalar dependencias de Flutter
      - name: Install dependencies
        run: flutter pub get

      # 4. Configurar CocoaPods
      - name: Set up CocoaPods
        run: |
          sudo gem install cocoapods
          pod repo update

      # 5. Construir la aplicación iOS
      - name: Build iOS App
        run: flutter build ios --release --no-codesign -d 35DDC1EB-7B37-446F-8963-82D40A585406

      # 6. Construir las pruebas de integración para iOS
      - name: Build iOS Tests
        run: flutter build ios --config-only integration_test/face_benchmark_test.dart --no-codesign -d 35DDC1EB-7B37-446F-8963-82D40A585406


      # 7. Construir para Testing con Xcode
      - name: Build for Testing with Xcode
        run: |
          xcodebuild build-for-testing \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -derivedDataPath build/ios_integ \
            -sdk iphoneos

      # 8. Empaquetar los artefactos de prueba
      - name: Package Test Artifacts
        run: |
          pushd build/ios_integ/Build/Products
          find . -name "Runner_*.xctestrun" -exec zip -r --must-match "ios_tests.zip" "Release-iphoneos" {} +
          popd

      # 9. Subir artefactos (Opcional)
      - name: Upload Artifacts (Optional)
        uses: actions/upload-artifact@v3
        with:
          name: ios_tests.zip
          path: build/ios_integ/Build/Products/ios_tests.zip

      # 10. Autenticar con Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 11. Instalar Google Cloud SDK
      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          install_components: firebase

      # 12. Ejecutar pruebas en Firebase Test Lab
      - name: Upload to Firebase Test Lab
        run: |
          gcloud firebase test ios run \
            --test "build/ios_integ/Build/Products/ios_tests.zip" \
            --device model=iphone14pro,version=16.6,locale=en_US,orientation=portrait \
            --results-bucket=${{ secrets.GCP_RESULTS_BUCKET }} \
            --results-dir=ios_tests/${{ github.run_id }}
